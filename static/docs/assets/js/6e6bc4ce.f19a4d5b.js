"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4629],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},8728:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/chat","title":"Chat Integration","description":"The genx3D chat API provides programmatic access to the AI assistant for 3D modeling tasks.","source":"@site/docs/api/chat.md","sourceDirName":"api","slug":"/api/chat","permalink":"/docs/api/chat","draft":false,"unlisted":false,"editUrl":"https://github.com/yourusername/genx3D/tree/main/docs/docs/api/chat.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Data Models","permalink":"/docs/api/models"}}');var r=s(4848),i=s(8453);const a={sidebar_position:4},o="Chat Integration",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Core Endpoints",id:"core-endpoints",level:2},{value:"Send Message",id:"send-message",level:3},{value:"Get Chat History",id:"get-chat-history",level:3},{value:"Clear Chat History",id:"clear-chat-history",level:3},{value:"Request Parameters",id:"request-parameters",level:2},{value:"Message Object",id:"message-object",level:3},{value:"Supported AI Models",id:"supported-ai-models",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Chat Response Object",id:"chat-response-object",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Context-Aware Conversations",id:"context-aware-conversations",level:3},{value:"Parameter Suggestions",id:"parameter-suggestions",level:3},{value:"Code Optimization",id:"code-optimization",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Python Integration",id:"python-integration",level:3},{value:"JavaScript Integration",id:"javascript-integration",level:3},{value:"React Hook",id:"react-hook",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Message Structure",id:"message-structure",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"chat-integration",children:"Chat Integration"})}),"\n",(0,r.jsx)(n.p,{children:"The genx3D chat API provides programmatic access to the AI assistant for 3D modeling tasks."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The chat API allows you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send natural language requests to the AI assistant"}),"\n",(0,r.jsx)(n.li,{children:"Receive generated CAD code and explanations"}),"\n",(0,r.jsx)(n.li,{children:"Maintain conversation context across multiple messages"}),"\n",(0,r.jsx)(n.li,{children:"Integrate AI assistance into your applications"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"All chat endpoints require authentication using your API key:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer YOUR_API_KEY\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-endpoints",children:"Core Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"send-message",children:"Send Message"}),"\n",(0,r.jsx)(n.p,{children:"Send a message to the AI assistant and receive a response."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /api/v1/chat\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n\n{\n  "message": "Create a gear with 20 teeth and 40mm diameter",\n  "context": "model_123",\n  "model": "gpt-4o-mini",\n  "temperature": 0.7\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "chat_123",\n  "message": "Here\'s a parametric gear with 20 teeth and 40mm diameter:",\n  "code": "function createGear(teeth, radius, thickness) {\\n  var gear = CSG.cylinder({\\n    start: [0, 0, 0],\\n    end: [0, 0, thickness],\\n    radius: radius\\n  });\\n  \\n  for (var i = 0; i < teeth; i++) {\\n    var angle = (i * 360) / teeth;\\n    var tooth = CSG.cube({\\n      center: [radius * Math.cos(angle * Math.PI / 180), \\n               radius * Math.sin(angle * Math.PI / 180), thickness/2],\\n      radius: [2, 2, thickness/2]\\n    });\\n    gear = gear.union(tooth);\\n  }\\n  \\n  return gear;\\n}\\n\\nvar myGear = createGear(20, 20, 10);",\n  "timestamp": "2024-01-15T10:30:00Z",\n  "session_id": "session_789"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-chat-history",children:"Get Chat History"}),"\n",(0,r.jsx)(n.p,{children:"Retrieve the conversation history for a session."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/v1/chat/history?session_id=session_789&limit=50&offset=0\nAuthorization: Bearer YOUR_API_KEY\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "messages": [\n    {\n      "id": "msg_123",\n      "role": "user",\n      "content": "Create a gear with 20 teeth",\n      "timestamp": "2024-01-15T10:30:00Z"\n    },\n    {\n      "id": "msg_124",\n      "role": "assistant",\n      "content": "Here\'s a parametric gear...",\n      "code": "function createGear(teeth, radius) { ... }",\n      "timestamp": "2024-01-15T10:30:05Z"\n    }\n  ],\n  "total": 10,\n  "has_more": false\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"clear-chat-history",children:"Clear Chat History"}),"\n",(0,r.jsx)(n.p,{children:"Clear the conversation history for a session."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"DELETE /api/v1/chat/history?session_id=session_789\nAuthorization: Bearer YOUR_API_KEY\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Chat history cleared"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"request-parameters",children:"Request Parameters"}),"\n",(0,r.jsx)(n.h3,{id:"message-object",children:"Message Object"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"message"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"The text message to send"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"context"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Associated model ID for context"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"AI model to use (default: gpt-4o-mini)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"temperature"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Creativity level (0.0-1.0, default: 0.7)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"session_id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Session ID for conversation continuity"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"supported-ai-models",children:"Supported AI Models"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gpt-4o"})," - Most capable, higher cost"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gpt-4o-mini"})," - Good balance (default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"anthropic/claude-3.5-sonnet"})," - Alternative perspective"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"local/llama-3.1-8b"})," - Local model (if available)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,r.jsx)(n.h3,{id:"chat-response-object",children:"Chat Response Object"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Unique response identifier"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"message"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"AI's text response"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"code"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Generated CAD code (if applicable)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timestamp"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Response timestamp"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"session_id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Session identifier"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model_used"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"AI model that generated the response"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tokens_used"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Number of tokens consumed"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"context-aware-conversations",children:"Context-Aware Conversations"}),"\n",(0,r.jsx)(n.p,{children:"The AI assistant can reference your current model:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Make the gear teeth longer",\n  "context": "model_123"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"parameter-suggestions",children:"Parameter Suggestions"}),"\n",(0,r.jsx)(n.p,{children:"Ask for design recommendations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "What\'s a good wall thickness for 3D printing this part?",\n  "context": "model_123"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-optimization",children:"Code Optimization"}),"\n",(0,r.jsx)(n.p,{children:"Request performance improvements:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "How can I optimize this code for faster rendering?",\n  "context": "model_123"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"python-integration",children:"Python Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\n\nclass GenX3DChat:\n    def __init__(self, api_key, base_url="http://localhost:8000/api/v1"):\n        self.api_key = api_key\n        self.base_url = base_url\n        self.headers = {\n            "Authorization": f"Bearer {api_key}",\n            "Content-Type": "application/json"\n        }\n    \n    def send_message(self, message, context=None, model="gpt-4o-mini"):\n        """Send a message to the AI assistant."""\n        payload = {\n            "message": message,\n            "model": model\n        }\n        if context:\n            payload["context"] = context\n        \n        response = requests.post(\n            f"{self.base_url}/chat",\n            headers=self.headers,\n            json=payload\n        )\n        return response.json()\n    \n    def get_history(self, session_id, limit=50):\n        """Get chat history for a session."""\n        params = {\n            "session_id": session_id,\n            "limit": limit\n        }\n        response = requests.get(\n            f"{self.base_url}/chat/history",\n            headers=self.headers,\n            params=params\n        )\n        return response.json()\n\n# Usage example\nchat = GenX3DChat("your_api_key")\nresponse = chat.send_message("Create a simple cube")\nprint(response["code"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"javascript-integration",children:"JavaScript Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class GenX3DChat {\n  constructor(apiKey, baseUrl = 'http://localhost:8000/api/v1') {\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  async sendMessage(message, context = null, model = 'gpt-4o-mini') {\n    const payload = {\n      message,\n      model\n    };\n    if (context) payload.context = context;\n\n    const response = await fetch(`${this.baseUrl}/chat`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(payload)\n    });\n    return response.json();\n  }\n\n  async getHistory(sessionId, limit = 50) {\n    const params = new URLSearchParams({\n      session_id: sessionId,\n      limit: limit.toString()\n    });\n\n    const response = await fetch(`${this.baseUrl}/chat/history?${params}`, {\n      headers: this.headers\n    });\n    return response.json();\n  }\n}\n\n// Usage example\nconst chat = new GenX3DChat('your_api_key');\nchat.sendMessage('Create a simple cube')\n  .then(response => console.log(response.code));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"react-hook",children:"React Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { useState, useCallback } from 'react';\n\nfunction useGenX3DChat(apiKey) {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const sendMessage = useCallback(async (message, context = null) => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/chat', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ message, context })\n      });\n      \n      const data = await response.json();\n      \n      setMessages(prev => [...prev, {\n        role: 'user',\n        content: message\n      }, {\n        role: 'assistant',\n        content: data.message,\n        code: data.code\n      }]);\n      \n      return data;\n    } catch (error) {\n      console.error('Chat error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiKey]);\n\n  return { messages, sendMessage, loading };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"message-structure",children:"Message Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Be specific"}),': "Create a gear with 20 teeth" vs "Make a gear"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Include dimensions"}),": Specify sizes when relevant"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mention constraints"}),': "Must be 3D printable" or "For injection molding"']}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    response = chat.send_message("Create a cube")\n    if "error" in response:\n        print(f"Error: {response[\'error\'][\'message\']}")\n    else:\n        print(f"Generated code: {response[\'code\']}")\nexcept requests.exceptions.RequestException as e:\n    print(f"Network error: {e}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsx)(n.p,{children:"Implement exponential backoff for rate limit errors:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import time\nimport random\n\ndef send_message_with_retry(chat, message, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return chat.send_message(message)\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 429:  # Rate limited\n                wait_time = (2 ** attempt) + random.uniform(0, 1)\n                time.sleep(wait_time)\n                continue\n            raise\n    raise Exception("Max retries exceeded")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'"Invalid API key" error'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify your API key is correct"}),"\n",(0,r.jsx)(n.li,{children:"Check that the key hasn't expired"}),"\n",(0,r.jsx)(n.li,{children:"Ensure proper Authorization header format"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'"Rate limit exceeded" error'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement exponential backoff"}),"\n",(0,r.jsx)(n.li,{children:"Check your usage limits"}),"\n",(0,r.jsx)(n.li,{children:"Consider upgrading your plan"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'"Model not available" error'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check available models in your plan"}),"\n",(0,r.jsx)(n.li,{children:"Use a different model parameter"}),"\n",(0,r.jsx)(n.li,{children:"Contact support for model access"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Check this guide for common issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Status"}),": Check system status page"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Support"}),": Contact support for account-specific issues"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./endpoints",children:"API Endpoints"})," - Learn about all available endpoints"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./authentication",children:"Authentication"})," - Understand API security"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./models",children:"Data Models"})," - Reference data schemas"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);